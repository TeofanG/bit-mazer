@page "/decrypt"
@using static BitMazer.Constants.AppConstants
@using BitMazer.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms

@inject IJSRuntime js
@inject JsUtilityService JsUtils

<PageTitle>Decrypt</PageTitle>
<h1>Decrypt</h1>
<h5 class="text-muted ml-1">Upload a file and provide the key necessary for decryption.</h5>

<div class="card shadow-sm rounded-4 p-4 mt-4 mb-4">
    <!--Upload file button-->
    <div class="mb-3">
        <label class="form-label">📁 Select file to decrypt:</label>
        <div class="input-group">
            <InputFile id="dec-file-upload" class="hidden-file-input" OnChange="LoadFile" />

            <label for="dec-file-upload" class="btn btn-outline-primary">
                <i class="fa-solid fa-upload"></i> Choose a File
            </label>

            @if (selectedFile != null)
            {
                <div class="nofilemsg">
                    <span>@selectedFile.Name</span>
                    <button class="clear-file-btn ms-2"
                            title="Remove file"
                            @onclick="@(() => ClearUploadFileField("file"))">
                        <i class="fa-solid fa-xmark small-icon"></i>
                    </button>
                </div>
            }
            else
            {
                <span class="nofilemsg">No file selected.</span>
            }
        </div>
        <div class="text-danger fw-bold">
            @fileError
        </div>
    </div>

    <!--Uploaded file metadata-->
    @if (selectedFile != null && metadata != null)
    {
        <div class="alert alert-info">
            <p><strong>Name:</strong> @metadata.FileName</p>
            <p><strong>Type:</strong> @metadata.FileType</p>
            <p><strong>Size:</strong> @metadata.FileSize MB</p>
            <p><strong>Encryption algorithm:</strong> @metadata.EncAlg</p>
        </div>
    }

    <!--Upload key button-->
    <div class="mb-3">
        <label class="form-label">🔑 Select key:</label>
        <div class="input-group">
            <InputFile id="dec-key-upload" class="hidden-file-input" OnChange="LoadKey" />

            <label for="dec-key-upload" class="btn btn-outline-primary">
                <i class="fa-solid fa-upload"></i> Choose a File
            </label>

            @if (selectedKey != null)
            {
                <div class="nofilemsg">
                    <span>@selectedKey.Name</span>
                    <button class="clear-file-btn ms-2"
                            title="Remove file"
                            @onclick="@(() => ClearUploadFileField("key"))">
                        <i class="fa-solid fa-xmark small-icon"></i>
                    </button>
                </div>
            }
            else
            {
                <span class="nofilemsg">No file selected.</span>
            }
        </div>
        <div class="text-danger fw-bold">
            @keyError
        </div>
    </div>

    <!--Start decrypt button-->
    <div class="mb-5 mt-1">
        <button @onclick="InitDecryption"
                class="btn btn-primary"
                disabled="@IsDecryptButtonDisabled()">
            <i class="bi bi-unlock"></i>
            Decrypt
        </button>
    </div>

    <!--Download and errors area-->
    <div class="mb-3">
        <!--Loader animation-->
        @if (IsDecrypting == true)
        {
            <div class="loader"></div>
        }
        else if (!string.IsNullOrEmpty(decryptionError))
        {
            <div class="text-danger fw-bold">
                @decryptionError
            </div>
        }
        <div id="download-container" style="display: @(IsDecrypting ? "none" : "block")">
            <h5 class="mb-2">📤 Result</h5>
            <div id="result-label">
                <p class="text-muted">Your decrypted file will be ready to download here after processing.</p>
            </div>
        </div>
    </div>
</div>


@code {
    private async Task ClearUploadFileField(string field)
    {
        if (field.Equals("file"))
        {
            selectedFile = null;
            fileError = string.Empty;
            decryptionError = string.Empty;
            await JsUtils.ClearDownloadSectionAsync();
        }
        else
        {
            selectedKey = null;
            keyError = string.Empty;
        }
    }


    public async Task InitDecryption()
    {
        decryptionError = string.Empty;
        if (selectedFile == null)
        {
            decryptionError = "No file selected for decryption.";
        }
        else if (selectedKey == null)
        {
            decryptionError = "No key chosen for decryption.";
        }
        else
        {
            IsDecrypting = true;
            StateHasChanged();

            int minAnimationDuration = @MinLoadingAnimationTime;
            DateTime startTime = DateTime.Now;

            try
            {
                string result = await js.InvokeAsync<string>("startDecryption");

                int elapsedTime = (int)(DateTime.Now - startTime).TotalMilliseconds;
                if (elapsedTime < minAnimationDuration)
                {
                    await Task.Delay(minAnimationDuration - elapsedTime);
                }

                if (result.StartsWith("Error:"))
                {
                    Console.WriteLine($"Decryption failed: {result}");
                    decryptionError = "Error during decryption. Check the input file and key.";
                }
                else
                {
                    Console.WriteLine("✅ Decryption successful.");
                    decryptionError = string.Empty;
                }
            }
            catch (JSException jsEx)
            {
                // 🔥 Handle JavaScript errors thrown from JS function
                Console.WriteLine(jsEx.Message);
                decryptionError = "Error during decryption. Check the input file and key.";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Decryption failed: {ex.Message}");
                decryptionError = "Error during decryption. Check the input file and key.";
            }
            finally
            {
                IsDecrypting = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        fileError = string.Empty;
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 256 * 1024 * 1024)
            {
                Console.WriteLine("File too large. Max allowed size is 256MB.");
                fileError = "File too large. Max allowed size is 256MB.";
                return;
            }

            selectedFile = new FileModel(file);
            metadata = null;
            try
            {
                string metadataJson = await JsUtils.ExtractMetadataFromFileAsync();
                metadata = JsonSerializer.Deserialize<FileMetadataModel>(metadataJson);
            }
            catch (JSException jsEx)
            {
                Console.WriteLine(jsEx);
                fileError = "Corrupt file or with invalid encryption format.";
            }
            catch (JsonException ex)
            {
                Console.WriteLine(ex);
                fileError = "Corrupt file or with invalid encryption format.";
            }
        }
    }

    private void LoadKey(InputFileChangeEventArgs e)
    {
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 1300)
            {
                Console.WriteLine("Invalid RSA key file size.");
                keyError = "Invalid key file size";
            }
            else
            {
                keyError = string.Empty;
            }
            selectedKey = new FileModel(file);
        }
    }

    private bool IsDecryptButtonDisabled()
    {
        return selectedFile == null
            || selectedKey == null
            || !string.IsNullOrEmpty(fileError)
            || !string.IsNullOrEmpty(keyError);
    }


    private FileModel? selectedFile { get; set; }

    private FileModel? selectedKey { get; set; }

    private FileMetadataModel? metadata = null;

    private string fileError = string.Empty;

    private string keyError = string.Empty;

    private string decryptionError = string.Empty;

    private bool IsDecrypting;
}
