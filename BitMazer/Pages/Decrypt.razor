@page "/decrypt"
@using BitMazer.Constants
@using BitMazer.Models
@using BitMazer.Services
@using System.Text.Json
@using BitMazer.Components

<PageTitle>Decrypt</PageTitle>
<h1>Decrypt</h1>
<h5 class="text-muted ml-1">Upload a file and provide the key necessary for decryption.</h5>

<div class="card flex-column flex-md-row gap-5 p-4 mt-5">
    <div class="d-flex flex-column flex-md-col">
        <!--Upload file button-->
        <div class="mb-3">
            <label class="form-label">📁 Select file to decrypt:</label>
            <div class="input-group">
                <InputFile id="dec-file-upload" class="hidden-file-input" OnChange="LoadFile" />

                <label for="dec-file-upload" class="btn btn-outline-primary">
                    <i class="fa-solid fa-upload"></i> Choose a File
                </label>

                @if (selectedFile != null)
                {
                    <div class="nofilemsg">
                        <span>@selectedFile.Name</span>
                        <button class="clear-file-btn ms-2"
                                title="Remove file"
                                @onclick="@(() => ClearUploadFileField("file"))">
                            <i class="fa-solid fa-xmark small-icon"></i>
                        </button>
                    </div>
                }
                else
                {
                    <span class="nofilemsg">No file selected.</span>
                }
            </div>
            <div class="text-danger fw-bold">
                @fileError
            </div>
        </div>

        <!--Uploaded file metadata-->
        @if (selectedFile != null && metadata != null)
        {
            <div class="alert alert-info">
                <p><strong>Name:</strong> @metadata.FileName</p>
                <p><strong>Type:</strong> @metadata.FileType</p>
                <p><strong>Size:</strong> @metadata.FileSize MB</p>
                <p><strong>Encryption algorithm:</strong> @metadata.EncAlg</p>
            </div>
        }


        <!--Upload key button-->
        <div class="mb-3">
            <label class="form-label">🔑 Select key:</label>
            <div class="input-group">
                <InputFile id="dec-key-upload" class="hidden-file-input" OnChange="LoadKey" />

                <label for="dec-key-upload" class="btn btn-outline-primary">
                    <i class="fa-solid fa-upload"></i> Choose a File
                </label>

                @if (selectedKey != null)
                {
                    <div class="nofilemsg">
                        <span>@selectedKey.Name</span>
                        <button class="clear-file-btn ms-2"
                                title="Remove file"
                                @onclick="@(() => ClearUploadFileField("key"))">
                            <i class="fa-solid fa-xmark small-icon"></i>
                        </button>
                    </div>
                }
                else
                {
                    <span class="nofilemsg">No file selected.</span>
                }
            </div>
            <div class="text-danger fw-bold ms-3">
                @keyError
            </div>
        </div>
    </div>
    
    <!--Start decrypt button-->
    <div class="d-flex align-items-center flex-md-col">
        <button @onclick="InitDecryption"
                class="btn btn-primary"
                disabled="@IsDecryptButtonDisabled()">
            <i class="bi bi-unlock"></i>
            Decrypt
        </button>
    </div>

    <FileDownloadContainer @bind-OperationError=@decryptionError
                           @bind-IsProcessing=@IsDecrypting
                           @bind-DoneProcessing=@doneDecrypting
                           OperationPlaceholder="@AppConstants.DecResultPlaceholder"/>
</div>


@code {
    private async Task ClearUploadFileField(string field)
    {
        if (field.Equals("file"))
        {
            selectedFile = null;
            fileError = string.Empty;
            decryptionError = string.Empty;
            keyError = string.Empty;
            doneDecrypting = false;
            IsDecrypting = false;
            await Task.Delay(100);
            await JS.ClearDownloadSectionAsync();
        }
        else
        {
            selectedKey = null;
            keyError = string.Empty;
        }
    }


    public async Task InitDecryption()
    {
        IsDecrypting = true;
        doneDecrypting = false;
        decryptionError = string.Empty;
        if (selectedFile == null)
        {
            decryptionError = "No file selected for decryption.";
        }
        else if (selectedKey == null)
        {
            decryptionError = "No key chosen for decryption.";
        }
        else
        {

            int minAnimationDuration = @AppConstants.MinLoadingAnimationTime;
            DateTime startTime = DateTime.Now;

            try
            {
                string result = await JS.InitDecryptionAsync();

                int elapsedTime = (int)(DateTime.Now - startTime).TotalMilliseconds;
                if (elapsedTime < minAnimationDuration)
                {
                    await Task.Delay(minAnimationDuration - elapsedTime);
                }

                if (result.StartsWith("Error:"))
                {
                    Console.WriteLine($"Decryption failed: {result}");
                    if (result.Contains("HMAC") ||
                        result.Contains("invalid tag")) 
                    {
                        decryptionError = "Decryption failed: the data could not be authenticated. It may have been tampered with or corrupted.";
                    } else
                    {    
                        decryptionError = "Error during decryption. Check the input file and key.";
                    }
                }
                else
                {
                    Console.WriteLine("✅ Decryption successful.");
                    decryptionError = string.Empty;
                }
            }
            catch (JSException jsEx)
            {
                Console.WriteLine(jsEx.Message);
                decryptionError = "Error during decryption. Check the input file and key.";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Decryption failed: {ex.Message}");
                decryptionError = "Error during decryption. Check the input file and key.";
            }
            finally
            {
                IsDecrypting = false;
                doneDecrypting = true;
            }
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        fileError = string.Empty;
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 300 * 1024 * 1024)
            {
                Console.WriteLine("File too large. Max allowed size is 256MB.");
                fileError = "File too large. Max allowed size is 256MB.";
                return;
            }

            selectedFile = new FileModel(file);
            metadata = null;
            try
            {
                string metadataJson = await JS.ExtractMetadataFromFileAsync();
                metadata = JsonSerializer.Deserialize<FileMetadataModel>(metadataJson);
            }
            catch (JSException jsEx)
            {
                Console.WriteLine(jsEx);
                fileError = "Corrupt file or with invalid encryption format.";
            }
            catch (JsonException ex)
            {
                Console.WriteLine(ex);
                fileError = "Corrupt file or with invalid encryption format.";
            }
        }
    }

    private void LoadKey(InputFileChangeEventArgs e)
    {
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if (file.Size >= 3000)
            {
                Console.WriteLine("Invalid RSA key file size.");
                keyError = "Invalid key file size";
            }
            else
            {
                keyError = string.Empty;
            }
            selectedKey = new FileModel(file);
        }
    }

    private bool IsDecryptButtonDisabled()
    {
        return selectedFile == null
            || selectedKey == null
            || !string.IsNullOrEmpty(fileError)
            || !string.IsNullOrEmpty(keyError);
    }


    private FileModel? selectedFile { get; set; }

    private FileModel? selectedKey { get; set; }

    private FileMetadataModel? metadata = null;

    private string fileError = string.Empty;

    private string keyError = string.Empty;

    private string decryptionError = string.Empty;

    private bool IsDecrypting;

    private bool doneDecrypting = false;
}
