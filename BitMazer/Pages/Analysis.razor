@using BitMazer.Enums
@using static BitMazer.Constants.AppConstants
@page "/analysis"
@using ApexCharts
@using System.Text.Json
@inject IJSRuntime JS
@using BitMazer.Services
@using BitMazer.Models
@using System.Security.Cryptography
@using BitMazer.Components
@using System.Diagnostics

<PageTitle>Analysis</PageTitle>
<h1>Analysis</h1>
<h5 class="text-muted ml-1">Visualize and compare the effects of different encryption algorithms on your data.</h5>

<div class="card shadow-sm rounded-4 p-4 mt-4">
    <div class="row">
        <div class="col-auto">
            <AnalysisSetupForm 
            SelectedFileName="@selectedFile?.Name"
            OnSubmit="RunAnalysis"
            OnFileChange="LoadFile"
            OnClearFile="ClearUploadFileField"
            @bind-SelectedAlgorithms="selectedAlgorithms" />

            @if (IsLoading == true)
            {
                <div class="mb-3">
                    <div class="loader"></div>
                </div>
            }

            @if (error != null)
            {
                <div class="mb-3">
                    <div id="error-container">
                        <p style="color: red;">@error</p>
                    </div>
                </div>
            }

        </div>
        <div class="col-auto ms-auto">
            @if (selectedFile != null  && algorithmStats.Count>1 && originalChartData != null)
            {
                <ul class="nav nav-tabs" id="histogramTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button @onclick="@(() => currentActiveTab="original")" class="nav-link" id="original-tab"  type="button" role="tab">
                            Original
                        </button>
                    </li>

                    @foreach (var chart in algorithmStats)
                    {
                        <li class="nav-item" role="presentation">
                            <button @onclick="@(() => currentActiveTab = chart.Algorithm.ToString())" class="nav-link" id="@($"{chart.Algorithm}-tab")"  type="button" role="tab">
                                @chart.Algorithm
                            </button>
                        </li>
                    }
                </ul>

                <div class="tab-content mt-3" id="histogramTabsContent">
                    <div class="tab-pane fade @(currentActiveTab == "original" ? "show active" : "")" id="original" role="tabpanel">

                        <ApexChart TItem="HistogramDataModel"
                        Title="Original File - Histogram"
                        Options="originalChartOptions"
                        Height="400"
                        Width="550"
                        @ref="originalFileChart">
                            <ApexPointSeries TItem="HistogramDataModel"
                            Items="originalChartData"
                            Name="Original"
                            SeriesType="SeriesType.Bar"
                            XValue="e => e.Byte"
                            YValue="e => e.Occurences" />
                        </ApexChart>
                    </div>
                    @foreach (var chart in algorithmStats)
                    {
                        @if (chart.HistogramData != null && chart.HistogramOptions != null)
                        {
                        }
                        <div class="tab-pane fade @(currentActiveTab == chart.Algorithm.ToString() ? "show active" : "")" id="@chart.Algorithm" role="tabpanel">
                            <ApexChart TItem="HistogramDataModel"
                            Title="@($"{chart.Algorithm} Encrypted File - Histogram")"
                            Options="chart.HistogramOptions"
                            Height="400"
                            Width="550">
                                <ApexPointSeries TItem="HistogramDataModel"
                                Items="chart.HistogramData"
                                Name="@chart.Algorithm.ToString()"
                                SeriesType="SeriesType.Bar"
                                XValue="e => e.Byte"
                                YValue="e => e.Occurences" />
                            </ApexChart>
                        </div>
                    }
                </div>
            }

        </div>
    </div>
    <div class="row">
        @if(algorithmStats.Count > 0)
        {
            <AnalysisTable Data="algorithmStats" SelectedAlg="@currentActiveTab" />
        }
    </div>
</div>

@code {
    private IJSObjectReference? _aesModule;
    private IJSObjectReference? _chachaModule;
    private IJSObjectReference? _twofishModule;

    private double _lastWorkerMemoryUsed;
    private int _lastEncryptionTimeMs;

    private string currentActiveTab = "original";

    private async Task RunAnalysis(){
        error = null;
        if (selectedFile == null)
        {
            error = "No file selected for analysis.";
            return;
        }
        if (!selectedAlgorithms.Any())
        {
            error = "Select at least one algorithm.";
            return;
        }
        IsLoading = true;
        StateHasChanged();

        int minDuration = MinLoadingAnimationTime;
        DateTime startTime = DateTime.Now;

        originalChartData = HistogramService.GetChartData(selectedFile.ByteArrayFile);
        originalChartOptions = HistogramService.GetChartOptions();

        algorithmStats.Clear();

        foreach (var alg in selectedAlgorithms)
        {
            byte[]? encryptedBytes = await EncryptFile(selectedFile.Base64File, alg);

            if (encryptedBytes == null)
            {
                error = $"Error failed for {alg}.";
                continue;
            }
            int[] freq = new int[256];
            foreach (byte b in encryptedBytes)
            {                
                freq[b]++;
            }
                algorithmStats.Add(new AlgorithmAnalysis
                    {
                        Algorithm = alg,
                        MemoryUsageMB = _lastWorkerMemoryUsed,
                        EncryptionTimeMs = _lastEncryptionTimeMs,
                        HistogramData = HistogramService.GetChartData(encryptedBytes),
                        HistogramOptions = HistogramService.GetChartOptions(),
                        Entropy = CalculateShannonEntropy(encryptedBytes),
                        StdDev = CalculateStandardDeviation(freq)
                    });
        }

        // Ensure minimum loader duration
        int elapsedTime = (int)(DateTime.Now - startTime).TotalMilliseconds;
        if (elapsedTime < minDuration)
        {
            await Task.Delay(minDuration - elapsedTime);
        }
        IsLoading = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _aesModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/algorithms/aes.js");
        _chachaModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/algorithms/chacha.js");
        _twofishModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/algorithms/twofish.js");
    }
    private TaskCompletionSource<byte[]>? encryptionTcs;

    private async Task<byte[]?> EncryptFile(string base64, EncryptionAlgorithm alg)
    {
        var iv = new byte[24];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(iv);
        }

        encryptionTcs = new TaskCompletionSource<byte[]>();
        var dotNetRef = DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("startEncryptionWorker", base64, alg.ToString(), iv, dotNetRef);

        try
        {
            return await encryptionTcs.Task;
        }
        catch (Exception ex)
        {
            error = $"Encryption failed: {ex.Message}";
            return null;
        }
    }  

    [JSInvokable]
    public Task OnEncryptedFromWorker(string base64Encrypted, double memoryUsed, int elapsedTimeMs)
    {
        var bytes = Convert.FromBase64String(base64Encrypted);
        _lastWorkerMemoryUsed = memoryUsed;
        _lastEncryptionTimeMs = elapsedTimeMs;
        encryptionTcs?.SetResult(bytes);
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnEncryptionError(string errorMsg)
    {
        encryptionTcs?.SetException(new Exception(errorMsg));
        return Task.CompletedTask;
    }


    private double CalculateShannonEntropy(byte[] data)
    {
        if (data == null || data.Length == 0) return 0.0;

        int[] freq = new int[256];
        foreach (byte b in data)
            freq[b]++;

        double entropy = 0.0;
        int len = data.Length;

        foreach (int count in freq)
        {
            if (count == 0) continue;
            double p = (double)count / len;
            entropy -= p * Math.Log2(p);
        }

        return entropy;
    }
    private double CalculateStandardDeviation(int[] frequencies)
    {
        double mean = frequencies.Average();
        double sumSquares = frequencies.Select(f => Math.Pow(f - mean, 2)).Sum();
        return Math.Sqrt(sumSquares / frequencies.Length);
    }

    private List<AlgorithmAnalysis> algorithmStats = new();
    private ApexChart<HistogramDataModel>? originalFileChart;
    private List<HistogramDataModel>? originalChartData;
    private ApexChartOptions<HistogramDataModel>? originalChartOptions;
    private FileModel? selectedFile = null;
    private List<EncryptionAlgorithm> selectedAlgorithms = new();
    private bool IsLoading;
    private string? error = null;
    private void ClearUploadFileField()
    {
        selectedFile = null;
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 256 * 1024 * 1024)
            {
                error = "File too large. Max allowed size is 256.";
            }
            selectedFile = new FileModel(file);
            await selectedFile.LoadAsync();
        }
    }
}