@using BitMazer.Enums
@using static BitMazer.Constants.AppConstants
@page "/analysis"
@using ApexCharts
@using System.Text.Json
@inject IJSRuntime JS
@using BitMazer.Services
@using BitMazer.Models
@using System.Security.Cryptography
@using BlazorBootstrap

<PageTitle>Analysis</PageTitle>
<h1>Analysis</h1>

<div class="container card my-4">
    <div class="row">
        <div class="col-5">
            <div class="mb-3">
                <label class="form-label">📄 Select file:</label>
                <div class="input-group">
                    <InputFile id="enc-file-upload" class="hidden-file-input" OnChange="LoadFile" />
                    <label for="enc-file-upload" class="btn btn-outline-primary">
                        <i class="fa-solid fa-upload"></i> Choose a File
                    </label>
                    @if (selectedFile != null)
                    {
                        <div class="nofilemsg">
                            <span>@selectedFile.Name</span>
                            <button class="clear-file-btn ms-2" @onclick="@(() => ClearUploadFileField("file"))" title="Remove file">
                                <i class="fa-solid fa-xmark small-icon"></i>
                            </button>
                        </div>

                    }
                    else
                    {
                        <span class="nofilemsg">No file selected.</span>
                    }

                </div>
            </div>
            <div class="mb-3">
                @foreach (var alg in Enum.GetValues<EncryptionAlgorithm>())
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox"
                               value="@alg"
                               @onchange="(e => ToggleAlgorithmSelection(alg, (bool?)((ChangeEventArgs)e).Value))" />
                        <label class="form-check-label">@alg</label>
                    </div>
                }
            </div>
            <div class="mb-3">
                <button id="encrypt-btn"
                        class="btn btn-primary"
                        @onclick="GenerateCharts">
                    Run Analysis
                </button>
            </div>
            @if (IsLoading == true)
            {
                <div class="loader"></div>
            }

            @if (error != null)
            {
                <div id="error-container">
                    <p style="color: red;">@error</p>
                </div>
            }

        </div>
        <div class="col-7">
            @if (selectedFile != null && originalChartData != null)
            {
                <ul class="nav nav-tabs" id="histogramTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="original-tab" data-bs-toggle="tab" data-bs-target="#original" type="button" role="tab">
                            Original
                        </button>
                    </li>
                    @foreach (var chart in encryptedCharts)
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="@($"{chart.Algorithm}-tab")" data-bs-toggle="tab" data-bs-target="#@chart.Algorithm" type="button" role="tab">
                                @chart.Algorithm
                            </button>
                        </li>
                    }
                </ul>

                <div class="tab-content mt-3" id="histogramTabsContent">
                    <div class="tab-pane fade show active" id="original" role="tabpanel">

                        <ApexChart TItem="HistogramDataModel"
                                   Title="Original File - Byte Frequencies"
                                   Options="originalChartOptions"
                                   Height="400"
                                   Width="550"
                                   @ref="originalFileChart">
                            <ApexPointSeries TItem="HistogramDataModel"
                                             Items="originalChartData"
                                             Name="Original"
                                             SeriesType="SeriesType.Bar"
                                             XValue="e => e.Byte"
                                             YValue="e => e.Occurences" />
                        </ApexChart>
                    </div>

                    @foreach (var chart in encryptedCharts)
                    {
                        @if (chart.ChartData != null && chart.ChartOptions != null)
                        {
                            <div class="tab-pane fade" id="@chart.Algorithm" role="tabpanel">
                                <ApexChart TItem="HistogramDataModel"
                                           Title="@($"{chart.Algorithm} - Encrypted (Entropy: {chart.Entropy:F2}) (StdDev: {chart.StdDev:F2})")"
                                           Options="chart.ChartOptions"
                                           Height="400"
                                           Width="550">
                                    <ApexPointSeries TItem="HistogramDataModel"
                                                     Items="chart.ChartData"
                                                     Name="@chart.Algorithm.ToString()"
                                                     SeriesType="SeriesType.Bar"
                                                     XValue="e => e.Byte"
                                                     YValue="e => e.Occurences" />
                                </ApexChart>
                            </div>
                        }
                    }
                </div>
            }
        </div>


    </div>
    <div class="row">
        @if (selectedFile != null && encryptedCharts.Any())
        {
            @* <div class="table-responsive mt-5"> *@
            @*     <table class="table table-striped table-bordered"> *@
            @*         <thead class="table-dark"> *@
            @*             <tr> *@
            @*                 <th>Algorithm</th> *@
            @*                 <th>Entropy</th> *@
            @*                 <th>Standard Deviation</th> *@
            @*                 <th>Memory Used (MB)</th> *@
            @*                 <th>Encryption Time (ms)</th> *@
            @*             </tr> *@
            @*         </thead> *@
            @*         <tbody> *@
            @*             @foreach (var chart in encryptedCharts) *@
            @*             { *@
            @*                 <tr> *@
            @*                     <td>@chart.Algorithm</td> *@
            @*                     <td>@chart.Entropy:F2</td> *@
            @*                     <td>@chart.StdDev:F2</td> *@
            @*                     <!--<td>@(chart.MemoryUsed / 1024.0 / 1024.0):F2</td>  bytes to MB --> *@
            @*                     <!--<td>@chart.EncryptionTimeMs</td>--> *@
            @*                 </tr> *@
            @*             } *@
            @*         </tbody> *@
            @*     </table> *@
            @* </div> *@
            <Grid TItem="Employee1"
      AllowSorting="true"
      Class="table table-hover table-bordered table-striped"
      DataProvider="EmployeesDataProvider"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="item => item.Id">
            @context.Id
        </GridColumn>

        <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="item => item.Name">
            @context.Name
        </GridColumn>

        <GridColumn TItem="Employee1" HeaderText="Designation" SortKeySelector="item => item.Designation">
            @context.Designation
        </GridColumn>

        <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="item => item.DOJ">
            @context.DOJ
        </GridColumn>

        <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="item => item.IsActive">
            @context.IsActive
        </GridColumn>
    </GridColumns>

</Grid>

@code {
    private IEnumerable<EncryptionAnalysis> employees = default!;

    private async Task<GridDataProviderResult<EncryptionAnalysis>> EmployeesDataProvider(GridDataProviderRequest<EncryptionAnalysis> request)
    {
        if (employees is null) // pull employees only one time for client-side filtering, sorting, and paging
            employees = GetEmployees(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(employees));
    }

    private IEnumerable<EncryptionAnalysis> GetEmployees()
    {
        return new List<EncryptionAnalysis>
        {
            new EncryptionAnalysis { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },
            new EncryptionAnalysis { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },
            new EncryptionAnalysis { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },
            new EncryptionAnalysis { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },
            new EncryptionAnalysis { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },
            new EncryptionAnalysis { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },
            new EncryptionAnalysis { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },
            new EncryptionAnalysis { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },
            new EncryptionAnalysis { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },
        };
    }
}
        }

    </div>
</div>

@code {
    private async Task GenerateCharts(){
        error = null;
        if (selectedFile == null)
        {
            error = "No file selected for analysis.";
            return;
        }
        if (!selectedAlgorithms.Any())
        {
            error = "Select at least one algorithm.";
            return;
        }
        IsLoading = true;
        StateHasChanged();

        int minDuration = MinLoadingAnimationTime;
        DateTime startTime = DateTime.Now;

        originalChartData = HistogramService.GetChartData(selectedFile.ByteArrayFile);
        originalChartOptions = HistogramService.GetChartOptions();

        encryptedCharts.Clear();
        
        foreach (var alg in selectedAlgorithms)
        {
            long memoryBefore = GC.GetTotalMemory(forceFullCollection: true);

            byte[]? encryptedBytes = await EncryptFile(selectedFile.Base64File, alg);
            long memoryAfter = GC.GetTotalMemory(forceFullCollection: true);
            long memoryUsed = memoryAfter - memoryBefore;
            if (encryptedBytes == null)
            {
                error = $"Error failed for {alg}.";
                continue;
            }
            int[] freq = new int[256];
            foreach (byte b in encryptedBytes)
                freq[b]++;
                encryptedCharts.Add(new HistogramModel
                    {
                        Algorithm = alg,
                        ChartData = HistogramService.GetChartData(encryptedBytes),
                        ChartOptions = HistogramService.GetChartOptions(),
                        Entropy = CalculateShannonEntropy(encryptedBytes),
                        StdDev = CalculateStandardDeviation(freq)
                    });
        }

        // Ensure minimum loader duration
        int elapsedTime = (int)(DateTime.Now - startTime).TotalMilliseconds;
        if (elapsedTime < minDuration)
        {
            await Task.Delay(minDuration - elapsedTime);
        }
        IsLoading = false;
        StateHasChanged();
    }
    private async Task<byte[]?> EncryptFile(string base64, EncryptionAlgorithm alg)
    {
        var iv = new byte[24];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(iv);
        }
        return alg switch
        {
            EncryptionAlgorithm.AES_GCM => await JS.InvokeAsync<byte[]>("aes.encryptBase64", base64, iv),
            EncryptionAlgorithm.ChaCha20 => await JS.InvokeAsync<byte[]>("chacha.encryptBase64", base64, iv),
            EncryptionAlgorithm.Twofish => await JS.InvokeAsync<byte[]>("twofish.encryptBase64", base64, iv),
            _ => null
        };
    }  


    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 256 * 1024 * 1024)
            {
                error = "File too large. Max allowed size is 256.";
            }
            selectedFile = new FileModel(file);
            await selectedFile.LoadAsync();
        }
    }

    private void ClearUploadFileField(string field)
    {
        selectedFile = null;
    }

    private void ToggleAlgorithmSelection(EncryptionAlgorithm alg, bool? isChecked)
    {
        if (isChecked==true)
        {
            if (!selectedAlgorithms.Contains(alg))
                selectedAlgorithms.Add(alg);
        }
        else
        {
            selectedAlgorithms.Remove(alg);
        }
    }

    private double CalculateShannonEntropy(byte[] data)
    {
        if (data == null || data.Length == 0) return 0.0;

        int[] freq = new int[256];
        foreach (byte b in data)
            freq[b]++;

        double entropy = 0.0;
        int len = data.Length;

        foreach (int count in freq)
        {
            if (count == 0) continue;
            double p = (double)count / len;
            entropy -= p * Math.Log2(p);
        }

        return entropy;
    }
    private double CalculateStandardDeviation(int[] frequencies)
    {
        double mean = frequencies.Average();
        double sumSquares = frequencies.Select(f => Math.Pow(f - mean, 2)).Sum();
        return Math.Sqrt(sumSquares / frequencies.Length);
    }

    private List<HistogramModel> encryptedCharts = new();
    private ApexChart<HistogramDataModel>? originalFileChart;
    private List<HistogramDataModel>? originalChartData;
    private ApexChartOptions<HistogramDataModel>? originalChartOptions;
    private FileModel? selectedFile = null;
    private List<EncryptionAlgorithm> selectedAlgorithms = new();
    private bool IsLoading;
    private string? error = null;

}