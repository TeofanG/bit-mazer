@page "/analysis"

@using BitMazer.Constants
@using BitMazer.Enums
@using BitMazer.Models
@using BitMazer.Components
@using BitMazer.Services
@using ApexCharts
@using System.Diagnostics
@using System.Security.Cryptography
@using System.Text.Json

<PageTitle>Analysis</PageTitle>
<h1>Analysis</h1>
<h5 class="text-muted ml-1">Visualize and compare the effects of different encryption algorithms on your data.</h5>

<div class="card p-4 mt-4 mb-4">
    @if(showAnalysisResult)
    {     
        <div class="card-header d-flex justify-content-between align-items-center mb-4">
            <span><strong>⚙️ File and Algorithm Selection</strong></span>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-outline-primary" @onclick="() => showInputPanel = !showInputPanel">
                    @(showInputPanel ? "Collapse ▲" : "Expand ▼")
                </button>
                <button @onclick="ResetSession"
                        type="button" class="btn btn-sm btn-outline-danger">
                    Reset All
                </button>
            </div>
        </div>
    }

    @if(showInputPanel)
    {
        <div class="row @(showAnalysisResult ? "ms-2 mt-2" : "")">

            <AnalysisInputPanel OnSubmit="RunAnalysis"
                                @bind-SelectedFile="@selectedFile"
                                @bind-SelectedAlgsKeySizes="@selectedAlgsKeySizes"
                                @bind-FileError="@fileError"/>

            <div class="mb-3">
                <div id="loader" class="d-none" />
            </div>

            @if (!string.IsNullOrEmpty(fileError))
            {
                <div class="mb-3">
                    <div id="error-container">
                        <p style="color: red;">@fileError</p>
                    </div>
                </div>
            }

            @if(showAnalysisResult) {
                <hr class="border-primary border-2 rounded" />
            }

        </div>
    }

    <div>
        @if (showAnalysisResult && algorithmStats.Count > 0 && selectedFile!= null)
        {
            <div class="row">
                <div class="col">
                    <HistogramViewer SelectedFile="@selectedFile"
                                     AlgorithmStats="@algorithmStats"
                                     AlgChartData="@algChartData"
                                     DefaultHistogram="original"/>
                </div>
                <div class="col">
                    <HistogramViewer SelectedFile="@selectedFile"
                                     AlgorithmStats="@algorithmStats"
                                     AlgChartData="@algChartData"
                                     DefaultHistogram="@algorithmStats[0].Algorithm.ToString()" />
                </div>
            </div>

            <div class="row">
                <AnalysisTable Data="algorithmStats" />
            </div>
        }
    </div>

    
</div>

@code {
    private const int DEFAULT_IV_SIZE = 24;
    private const int DEFAULT_KEY_SIZE = 32;

    protected override Task OnInitializedAsync()
    {
        showAnalysisResult = false;
        fileError = string.Empty;
        showInputPanel = true;
        selectedAlgsKeySizes = new();

        return Task.CompletedTask;
    }

    private async Task RunAnalysis(){
        fileError = string.Empty;
        baseIV = GetRandomByteArray(DEFAULT_IV_SIZE);
        baseKey = GetRandomByteArray(DEFAULT_KEY_SIZE);
        algorithmStats.Clear();

        int minDuration = @AppConstants.MinLoadingAnimationTime;
        DateTime startTime = DateTime.Now;


        foreach (var (alg,keySize) in selectedAlgsKeySizes)
        {
            byte[]? encryptedBytes = await EncryptFile(alg, selectedFile!.ByteArrayFile, baseIV!, baseKey!, keySize);
            if (encryptedBytes == null)
            {
                fileError = $"Analysis failed for {alg}.";
                continue;
            }

            algorithmStats.Add(new AlgorithmAnalysis
                    {
                        Algorithm = alg,
                        MemoryUsageBytes = (float)(_lastWorkerMemoryUsed/1024.0/1024.0),
                        EncryptionTimeMs = _lastEncryptionTimeMs,
                        FullHistogramData = HistogramService.GetChartData(encryptedBytes),
                        HistogramData = HistogramService.GetChartData(encryptedBytes),
                        HistogramOptions = HistogramService.GetChartOptions(),
                        Entropy = AlgorithmAnalysis.CalculateShannonEntropy(encryptedBytes),
                        StdDev = AlgorithmAnalysis.CalculateStandardDeviation(encryptedBytes),
                        ChiSquareValue = AlgorithmAnalysis.CalculateChiSquared(encryptedBytes),
                    });

            algChartData[alg.ToString()] = HistogramService.GetChartData(encryptedBytes);

        }

        // Ensure minimum loader duration
        int elapsedTime = (int)(DateTime.Now - startTime).TotalMilliseconds;
        if (elapsedTime < minDuration)
        {
            await Task.Delay(minDuration - elapsedTime);
        }

        algorithmStats = algorithmStats.OrderBy(a => a.Algorithm.ToString()).ToList();
        showInputPanel = false;
        showAnalysisResult = true;
    }

    private async Task<byte[]?> EncryptFile(EncryptionAlgorithm alg, byte[] plaindata, byte[] baseIV, byte[] baseKey, int keySize)
    {
        encryptionTcs = new TaskCompletionSource<byte[]>();
        var dotNetRef = DotNetObjectReference.Create(this);

        await JS.InitAnalysisAsync(alg.ToString(), plaindata, baseIV, baseKey, keySize, dotNetRef);

        try
        {
            return await encryptionTcs.Task;
        }
        catch (Exception ex)
        {
            fileError = $"Encryption failed: {ex.Message}";
            return null;
        }
    }  

    private byte[] GetRandomByteArray(int size) {
        var byteArray = new byte[size];
        using (var rng = RandomNumberGenerator.Create())
        {
            rng.GetBytes(byteArray);
        }
        return byteArray;
    }

    private void ResetSession()
    {   
        selectedFile = null; 
        algorithmStats.Clear();
        showInputPanel = true;
        showAnalysisResult = false;
        selectedAlgsKeySizes.Clear();
    }

    public class EncryptedResult
    {
        public required byte[] Encrypted { get; set; }
        public long MemoryUsed { get; set; }
        public float ElapsedTimeMs { get; set; }
    }

    [JSInvokable]
    public Task OnEncryptedFromWorker(EncryptedResult result)
    {
        _lastWorkerMemoryUsed = result.MemoryUsed;
        _lastEncryptionTimeMs = result.ElapsedTimeMs;
        encryptionTcs?.SetResult(result.Encrypted);

        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnEncryptionError(string errorMsg)
    {
        encryptionTcs?.SetException(new Exception(errorMsg));
        return Task.CompletedTask;
    }

    private TaskCompletionSource<byte[]>? encryptionTcs;

    private double _lastWorkerMemoryUsed;

    private float _lastEncryptionTimeMs;

    private List<AlgorithmAnalysis> algorithmStats = new();

    private FileModel? selectedFile = null;

    private Dictionary<EncryptionAlgorithm, int> selectedAlgsKeySizes;

    private bool showInputPanel;

    private string fileError = string.Empty;

    private byte[]? baseIV = null;

    private byte[]? baseKey = null;

    private Dictionary<string, List<HistogramDataModel>> algChartData = new();

    private bool showAnalysisResult;

}