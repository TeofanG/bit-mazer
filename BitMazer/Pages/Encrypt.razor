@using BitMazer.Enums
@using static BitMazer.Constants.AppConstants

@page "/encrypt"
@inject IJSRuntime js
@inject JsUtilityService JsUtils

<PageTitle>Encrypt</PageTitle>
<h1>Encrypt</h1>
<h5 class="text-muted ml-1">Upload a file and select your preferred encryption configuration below.</h5>

<div class="card shadow-sm rounded-4 p-4 mt-4 mb-4">
    <!--Upload file button-->
    <div class="mb-3">
        <label class="form-label">📁 Select file to encrypt:</label>
        <div class="input-group">
            <InputFile id="enc-file-upload" class="hidden-file-input" OnChange="LoadFile" />

            <label for="enc-file-upload" class="btn btn-outline-primary">
                <i class="fa-solid fa-upload"></i> Choose a File
            </label>

            @if (selectedFile == null)
            {
                <span class="nofilemsg">No file selected.</span>
            }
            else
            {
                <div class="nofilemsg">
                    <span>@selectedFile.Name</span>
                    <button class="clear-file-btn ms-2"
                            title="Remove file"
                            @onclick="@(() => ClearUploadFileField("file"))" >
                        <i class="fa-solid fa-xmark small-icon"></i>
                    </button>
                </div>
            }
        </div>
        <div class="text-danger fw-bold">
            @fileError
        </div>
    </div>

    <!--Uploaded file information-->
    @if (selectedFile != null)
    {
        <div class="alert alert-info">
            <p><strong>Name:</strong> @selectedFile?.Name</p>
            <p><strong>Size:</strong> @selectedFile?.Size MB</p>
            <p><strong>Type:</strong> @selectedFile?.Type</p>
        </div>
    }

    <!--Select algorithm dropdown-->
    <div class="mb-3">
        <label class="form-label">
            🔒 Choose algorithm and key size:
        </label>
        <div class="input-group">
            <InputSelect 
                Value="@selectedAlg"
                ValueChanged="@( (EncryptionAlgorithm alg) => OnAlgorithmChanged(alg))"
                ValueExpression="@( () => selectedAlg)"
                class="form-select alg-dropdown me-3">
                    @foreach (var alg in Enum.GetValues<EncryptionAlgorithm>())
                    {
                        <option value="@alg">@alg</option>
                    }
            </InputSelect>

            @if (keySizeOptions.TryGetValue(selectedAlg, out var sizes))
            {
                <InputSelect class="form-select alg-dropdown" @bind-Value="selectedKeySize">
                    @foreach (var size in sizes)
                    {
                        <option value="@size">@size bits</option>
                    }
                </InputSelect>         
            }
        </div>
    </div>

    <!--Checkboxes-->
    <div class="mb-3">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="key-selecting" @bind="@isCustomPassEnabled" />
            <label class="form-check-label" for="key-selecting">Choose your own key</label>
            <span class="ms-2"
            data-bs-toggle="tooltip"
            data-bs-placement="right"
            title="Reuse a previously generated key">
                <i class="fas fa-info-circle text-primary"></i>
            </span>
        </div>

        @if (isCustomPassEnabled == false) {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="key-reusing" @bind="@isKeyReusingEnabled" />
                <label class="form-check-label" for="key-reusing">Reuse the encryption key</label>
                <span class="ms-2"
                data-bs-toggle="tooltip"
                data-bs-placement="right"
                title="The auto generated encryption key will be available for downloading.">
                    <i class="fas fa-info-circle text-primary"></i>
                </span>
            </div>
        }

        @if (isCustomPassEnabled)
        {
            <div class="input-group mt-2">
                <InputFile id="key-file-upload" class="hidden-file-input" OnChange="LoadKey" />

                <label for="key-file-upload" class="btn btn-outline-primary">
                    <i class="fa-solid fa-upload"></i> Choose a File
                </label>

                @if (selectedKey == null)
                {
                    <span class="nofilemsg">No file selected.</span>
                }
                else
                {
                    <div class="nofilemsg">
                        <span>@selectedKey?.Name</span>
                        <button class="clear-file-btn ms-2" @onclick="@(() => ClearUploadFileField("key"))" title="Remove file">
                            <i class="fa-solid fa-xmark small-icon"></i>
                        </button>
                    </div>
                }
            </div>
            <div class="text-danger fw-bold">
                @keyError
            </div>
        }
    </div>

    <!--Start encrypt button-->
    <div class="mb-5">
        <button id="encrypt-btn"
                disabled="@IsEncryptButtonDisabled()"
                class="btn btn-primary"
        @onclick="InitEncryption">
            <i class="bi bi-lock"></i>
            Encrypt
        </button>
    </div>

    <!--Download and errors area-->
    <div class="mb-3">
        <!--Loader animation-->
        
        <div id="loader" class="d-none loader"></div>
        @if (!string.IsNullOrEmpty(encryptionError))
        {
            <div class="text-danger fw-bold">
                @encryptionError
            </div>
        }
        <div id="download-container" style="display: @(IsEncrypting ? "none" : "block")">
            <h5 class="mb-2">📤 Result</h5>
            <div id="result-label">
                <p class="text-muted">Your encrypted file will be ready to download here after processing.</p>
            </div>
        </div>
    </div>
</div>


@code {
    protected override void OnInitialized()
    {
        selectedKeySize = keySizeOptions[selectedAlg][0];
    }

    private async Task ClearUploadFileField(string field)
    {
        if(field.Equals("file")) {
            selectedFile = null;
            fileError = string.Empty;
            encryptionError = string.Empty;
            await JsUtils.ClearDownloadSectionAsync();
        } else {
            selectedKey = null;
            keyError = string.Empty;
        }
    }

    private async Task InitEncryption()
    {
        encryptionError = string.Empty;
        if (selectedFile == null)
        {
            encryptionError = "No file selected for encryption.";
        }
        else if (isCustomPassEnabled == true && selectedKey == null)
        {
            encryptionError = "No key chosen for encryption.";
        }
        else
        {
            IsEncrypting = true;
            StateHasChanged();

            try
            {
                string result = await js.InvokeAsync<string>("startEncryption", selectedAlg.ToString(), selectedKeySize, isCustomPassEnabled, isKeyReusingEnabled);

                if (result.StartsWith("Error:"))
                {
                    Console.WriteLine($"Encryption failed: {result}");
                    encryptionError = "Error during encryption. Check the input file and key.";
                }
                else
                {
                    Console.WriteLine("✅ Encryption successful.");
                    encryptionError = string.Empty;
                }
            }
            catch (JSException jsEx)
            {
                // 🔥 Handle JavaScript errors thrown from JS function
                Console.WriteLine(jsEx.Message);
                encryptionError = "Error during encryption. Check the input file and key.";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Encryption failed: {ex.Message}");
                encryptionError = "Error during encryption. Check the input file and key.";
            }
            finally
            {
                IsEncrypting = false;
                StateHasChanged();
            }
        }
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {   
            if (file.Size > 256 * 1024 * 1024)
            {
                Console.WriteLine("File too large. Max allowed size is 250.");
                fileError = "File too large. Max allowed size is 250.";
            }
            selectedFile = new FileModel(file);
        }
    }

    private void LoadKey(InputFileChangeEventArgs e)
    {
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if(file.Size != 294) {
                Console.WriteLine("Invalid RSA key file size.");
                keyError = "Invalid key file size";
            } else {
                keyError = string.Empty;
            }
            selectedKey = new FileModel(file);
        }
    }

    private bool IsEncryptButtonDisabled()
    {
        return selectedFile == null
            || (isCustomPassEnabled && selectedKey == null)
            || !string.IsNullOrEmpty(fileError)
            || !string.IsNullOrEmpty(keyError);
    }

    private EncryptionAlgorithm selectedAlg = EncryptionAlgorithm.AES_GCM;

    private int selectedKeySize;

    private readonly Dictionary<EncryptionAlgorithm, int[]> keySizeOptions = new()
    {
        { EncryptionAlgorithm.AES_GCM, new[] { 128, 256 } },
        { EncryptionAlgorithm.ChaCha20, new[] { 256 } },
        { EncryptionAlgorithm.Serpent, new[] { 128, 192, 256 } },
        { EncryptionAlgorithm.Twofish, new[] { 128, 192, 256 } },
    };

    private FileModel? selectedFile = null;

    private FileModel? selectedKey = null;

    private bool isCustomPassEnabled = false;

    private bool isKeyReusingEnabled = false;

    private bool IsEncrypting;

    private string fileError = string.Empty;

    private string keyError = string.Empty;

    private string encryptionError = string.Empty;

    private void OnAlgorithmChanged(EncryptionAlgorithm value)
    {
        selectedAlg = value;
        if (keySizeOptions.TryGetValue(selectedAlg, out var sizes) && sizes.Length > 0)
        {
            selectedKeySize = sizes[0];
        }
    }
}