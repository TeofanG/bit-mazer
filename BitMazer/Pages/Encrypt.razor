@page "/encrypt"

@using BitMazer.Enums
@using BitMazer.Constants
@using BitMazer.Models
@using BitMazer.Services
@using BitMazer.Components

<PageTitle>Encrypt</PageTitle>
<h1>Encrypt</h1>
<h5 class="text-muted ml-1">Upload a file and select your preferred encryption configuration below.</h5>

<div class="card flex-column flex-md-row gap-5 p-4 mt-5">
    <div class="d-flex flex-column flex-md-col">
        <!--Upload file button-->
        <div class="mb-3">
            <label class="form-label">📁 Select file to encrypt:</label>
            <div class="input-group">
                <InputFile id="enc-file-upload" class="hidden-file-input" OnChange="LoadFile" />

                <label for="enc-file-upload" class="btn btn-outline-primary">
                    <i class="fa-solid fa-upload"></i> Choose a File
                </label>

                @if (selectedFile == null)
                {
                    <span class="nofilemsg">No file selected.</span>
                }
                else
                {
                    <div class="nofilemsg">
                        <span>@selectedFile.Name</span>
                        <button class="clear-file-btn ms-2"
                                title="Remove file"
                                @onclick="@(() => ClearUploadFileField("file"))">
                            <i class="fa-solid fa-xmark small-icon"></i>
                        </button>
                    </div>
                }
            </div>
            <div class="text-danger fw-bold">
                @fileError
            </div>
        </div>

        <!--Uploaded file information-->
        @if (selectedFile != null)
        {
            <div class="alert alert-info">
                <p><strong>Name:</strong> @selectedFile?.Name</p>
                <p><strong>Size:</strong> @selectedFile?.Size MB</p>
                <p><strong>Type:</strong> @selectedFile?.Type</p>
            </div>
        }

        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="recommendedToggle" @bind="@UseRecommended">
            <span class="ms-2"
                  data-bs-toggle="tooltip"
                  data-bs-placement="right"
                  title="Recommended for non-advanced users">
                Use recommended encryption settings
                <i class="fas fa-info-circle text-primary"></i>
            </span>
        </div>

        <div class="@(useRecommended == true ? "disabled-div" : "") ">
            <!--Select algorithm dropdown-->
            <div class="mb-3 mt-2">
                <label class="form-label">
                    🔒 Choose algorithm and key size:
                </label>
                <div class="input-group">
                    <InputSelect Value="@selectedAlg"
                                 ValueChanged="@((EncryptionAlgorithm alg) => OnAlgorithmChanged(alg))"
                                 ValueExpression="@(() => selectedAlg)"
                                 class="form-select alg-dropdown me-3  mb-2 mb-md-0">
                        @foreach (var alg in AlgorithmsOptions.DisplayNames)
                        {
                            <option value="@alg.Key">@alg.Value</option>
                        }
                    </InputSelect>

                    @if (AlgorithmsOptions.KeySizes.TryGetValue(selectedAlg, out var sizes))
                    {
                        <InputSelect class="form-select alg-dropdown" @bind-Value="selectedKeySize">
                            @foreach (var size in sizes)
                            {
                                <option value="@size">@size bits</option>
                            }
                        </InputSelect>
                    }
                </div>
            </div>

            <!--RSA key configuration-->
            <div class="mb-3">
                <label class="form-label">📁 Configure RSA encryption key:</label>

                <ul class="nav nav-tabs mb-3 w-40">
                    <li class="nav-item @(isCustomPassEnabled == false ? "border-top border-start border-end border-primary" : "") ">
                        <button class="nav-link @(isCustomPassEnabled == false ? "active" : "")"
                                @onclick="() => isCustomPassEnabled = false">
                            Generate Key
                        </button>
                    </li>
                    <li class="nav-item @(isCustomPassEnabled == true ? "border-top border-start border-end border-primary" : "")">
                        <button class="nav-link @(isCustomPassEnabled == true ? "active" : "")"
                                @onclick="() => isCustomPassEnabled = true">
                            Choose Your Own Key
                        </button>
                    </li>
                </ul>

                @if (isCustomPassEnabled == true)
                {
                    <div class="input-group mt-2">
                        <InputFile id="key-file-upload" class="hidden-file-input" OnChange="LoadKey" />

                        <label for="key-file-upload" class="btn btn-outline-primary">
                            <i class="fa-solid fa-upload"></i> Choose a File
                        </label>

                        @if (selectedKey == null)
                        {
                            <span class="nofilemsg">No file selected.</span>
                        }
                        else
                        {
                            <div class="nofilemsg">
                                <span>@selectedKey?.Name</span>
                                <button class="clear-file-btn ms-2" @onclick="@(() => ClearUploadFileField("key"))" title="Remove file">
                                    <i class="fa-solid fa-xmark small-icon"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <div class="text-danger fw-bold">
                        @keyError
                    </div>
                }

                @if (isCustomPassEnabled == false)
                {
                    <div class="row d-flex">
                        <div class="col-md-2">
                            <div class="d-flex">
                                <label class="mb-0 me-2">Key Size: </label>
                                <InputSelect @bind-Value="@selectedRSAKeySize"
                                             class="form-select form-select-sm w-auto">
                                    @foreach (var keySize in AlgorithmsOptions.RSAKeySizes)
                                    {
                                        <option value="@keySize">@keySize bits</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check text-nowrap">
                                <input class="form-check-input" type="checkbox" id="key-reusing" @bind="@isKeyReusingEnabled" />
                                <label for="key-reusing">Reuse the encryption key</label>
                                <span class="ms-2"
                                      data-bs-toggle="tooltip"
                                      data-bs-placement="right"
                                      title="The auto generated encryption key will be available for downloading.">
                                    <i class="fas fa-info-circle text-primary"></i>
                                </span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!--Start encrypt button-->
    <div class="d-flex align-items-center flex-md-col">
        <button id="encrypt-btn"
                disabled="@IsEncryptButtonDisabled()"
                class="btn btn-primary"
                @onclick="InitEncryption">
            <i class="bi bi-lock"></i>
            Encrypt
        </button>
    </div>

   <FileDownloadContainer @bind-OperationError=@encryptionError
                          @bind-IsProcessing=@IsEncrypting
                          @bind-DoneProcessing=@doneEncrypting
                          OperationPlaceholder="@AppConstants.EncResultPlaceHolder"/>
</div>


@code {
    protected override void OnInitialized()
    {
        selectedKeySize = AlgorithmsOptions.KeySizes[selectedAlg][0];
        selectedRSAKeySize = AlgorithmsOptions.RSAKeySizes[0];
    }

    private async Task ClearUploadFileField(string field)
    {
        if(field.Equals("file")) {
            selectedFile = null;
            fileError = string.Empty;
            encryptionError = string.Empty;
            IsEncrypting = false;
            doneEncrypting = false;
            await JS.ClearDownloadSectionAsync();
        } else {
            selectedKey = null;
            keyError = string.Empty;
        }
    }

    private async Task InitEncryption()
    {
        doneEncrypting = false;
        encryptionError = string.Empty;
        if (selectedFile == null)
        {
            encryptionError = "No file selected for encryption.";
        }
        else if (isCustomPassEnabled == true && selectedKey == null)
        {
            encryptionError = "No key chosen for encryption.";
        }
        else
        {
            IsEncrypting = true;
            int minAnimationDuration = @AppConstants.MinLoadingAnimationTime;
            DateTime startTime = DateTime.Now;

            try
            {
                string result = await JS.InitEncryptionAsync(selectedAlg.ToString(), selectedKeySize, selectedRSAKeySize, isCustomPassEnabled, isKeyReusingEnabled);

                int elapsedTime = (int)(DateTime.Now - startTime).TotalMilliseconds;
                if (elapsedTime < minAnimationDuration)
                {
                    await Task.Delay(minAnimationDuration - elapsedTime);
                }

                if (result.StartsWith("Error:"))
                {
                    encryptionError = "Error during encryption. Check the input file and key.";
                }
                else
                {
                    encryptionError = string.Empty;
                }
            }
            catch (JSException jsEx)
            {
                // 🔥 Handle JavaScript errors thrown from JS function
                Console.WriteLine(jsEx.Message);
                encryptionError = "Error during encryption. Check the input file and key.";
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Encryption failed: {ex.Message}");
                encryptionError = "Error during encryption. Check the input file and key.";
            }
            finally
            {
                IsEncrypting = false;
                doneEncrypting = true;
            }
        }
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        if (e == null) throw new ArgumentNullException(nameof(e));
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {   
            if (file.Size > 256 * 1024 * 1024)
            {
                Console.WriteLine("File too large. Max allowed size is 250.");
                fileError = "File too large. Max allowed size is 250.";
            }
            selectedFile = new FileModel(file);
        }
    }

    private void LoadKey(InputFileChangeEventArgs e)
    {
        IBrowserFile? file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file != null)
        {
            if (file.Size > 700) {
                keyError = "Invalid key file size";
            } else {
                keyError = string.Empty;
            }
            selectedKey = new FileModel(file);
        }
    }

    private bool IsEncryptButtonDisabled()
    {
        return selectedFile == null
            || (isCustomPassEnabled && selectedKey == null)
            || !string.IsNullOrEmpty(fileError)
            || !string.IsNullOrEmpty(keyError);
    }

    private void ApplyRecommendedOptions()
    {
        selectedAlg = EncryptionAlgorithm.AES_GCM;
        selectedKeySize = 256;
        selectedRSAKeySize = 2048;
        isCustomPassEnabled = false;
        isKeyReusingEnabled = false;
        selectedKey = null;
        keyError = string.Empty;
    }

    private EncryptionAlgorithm selectedAlg = EncryptionAlgorithm.AES_GCM;

    private int selectedKeySize;

    private int selectedRSAKeySize;

    private FileModel? selectedFile = null;

    private FileModel? selectedKey = null;

    private bool isCustomPassEnabled = false;

    private bool isKeyReusingEnabled = false;

    private bool useRecommended;

    private bool UseRecommended
    {
        get => useRecommended;
        set
        {
            if (value && !useRecommended)
            {
                ApplyRecommendedOptions();
            }

            useRecommended = value;
        }
    }

    private bool IsEncrypting;

    private bool doneEncrypting = false;

    private string fileError = string.Empty;

    private string keyError = string.Empty;

    private string encryptionError = string.Empty;

    private void OnAlgorithmChanged(EncryptionAlgorithm value)
    {
        selectedAlg = value;
        if (AlgorithmsOptions.KeySizes.TryGetValue(selectedAlg, out var sizes) && sizes.Length > 0)
        {
            selectedKeySize = sizes[0];
        }
    }
}